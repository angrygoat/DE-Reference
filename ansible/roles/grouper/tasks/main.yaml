---
### postgres stuff. integrate into facepalm? ###
- name: ensure psycopg2 for postgresql modules
  yum: name=python-psycopg2 state=latest
  sudo: yes

- name: ensure that grouper.db.user exists
  postgresql_user: login_host={{db_host}} login_user={{db_admin}} login_password={{db_admin_password}} state=present
        name={{grouper.db.user}} password={{grouper.db.pass}} role_attr_flags=CREATEDB,NOCREATEROLE,NOCREATEUSER
  sudo: yes
  ignore_errors: yes

- name: ensure that postgresql db exists
  postgresql_db: login_host={{db_host}} login_user={{db_admin}} login_password={{db_admin_password}}
        name="subjectdata" owner={{grouper.db.user}} state=present
  sudo: yes

- name: set grouper db privileges
  postgresql_privs: login_host={{db_host}} login_user={{db_admin}} login_password={{db_admin_password}}
        database="subjectdata" roles={{grouper.db.user}} privs=ALL objs=public type=schema
  sudo: yes
### end postgres stuff. ###

- name: ensure that /etc/grouper exists
  sudo: yes
  file: path=/etc/grouper state=directory mode=0755
  tags:
    - config

- name: ensure that /etc/tomcat exists
  sudo: yes
  file: path=/etc/tomcat state=directory mode=0755
  tags:
    - config

- name: ensure that /var/log/grouper exists
  sudo: yes
  file: path=/var/log/grouper state=directory mode=0755
  tags:
    - config

- name: ensure that /etc/nginx exists
  sudo: yes
  file: path=/etc/nginx state=directory mode=0755
  tags:
    - config

- name: generate grouper.client.properties
  sudo: yes
  template: src=grouper.client.properties.j2 dest=/etc/grouper/grouper.client.properties owner=root group=root mode=0644
  register: grouper_properties_v
  tags:
    - config
    - config_grouper

- name: generate grouper.properties
  sudo: yes
  template: src=grouper.properties.j2 dest=/etc/grouper/grouper.properties owner=root group=root mode=0644
  register: grouper_properties_v
  tags:
    - config
    - config_grouper

- name: generate grouper-ws.properties
  sudo: yes
  template: src=grouper-ws.properties.j2 dest=/etc/grouper/grouper-ws.properties owner=root group=root mode=0644
  register: grouper_ws_properties_v
  tags:
    - config
    - config_grouper

- name: generate hibernate.properties
  sudo: yes
  template: src=grouper.hibernate.properties.j2 dest=/etc/grouper/hibernate.properties owner=root group=root mode=0644
  register: grouper_hibernate_properties_v
  tags:
    - config
    - config_grouper

- name: generate loader.properties
  sudo: yes
  template: src=grouper-loader.properties.j2 dest=/etc/grouper/loader.properties owner=root group=root mode=0644
  register: grouper_loader_properties_v
  tags:
    - config
    - config_grouper

- name: generate sources.xml
  sudo: yes
  template: src=sources.xml.j2 dest=/etc/grouper/sources.xml owner=root group=root mode=0644
  register: grouper_sources_xml_v
  tags:
    - config
    - config_grouper

- name: generate subject.properties
  sudo: yes
  template: src=subject.properties.j2 dest=/etc/grouper/subject.properties owner=root group=root mode=0644
  register: grouper_subject_properties_v
  tags:
    - config
    - config_grouper

- name: generate server.xml
  sudo: yes
  template: src=server.xml.j2 dest=/etc/tomcat/server.xml owner=root group=root mode=0644
  register: tomcat_server_xml_v
  tags:
    - config
    - config_tomcat

- name: generate setenv.sh
  sudo: yes
  template: src=setenv.sh.j2 dest=/etc/tomcat/setenv.sh owner=root group=root mode=0644
  register: tomcat_setenv_sh_v
  tags:
    - config
    - config_tomcat

- name: generate tomcat-users.xml
  sudo: yes
  template: src=tomcat-users.xml.j2 dest=/etc/tomcat/tomcat-users.xml owner=root group=root mode=0644
  register: tomcat_users_xml_v
  tags:
    - config
    - config_tomcat

- name: configure nginx
  sudo: yes
  template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf mode=0644
  register: nginx_conf_v
  tags:
    - config- config_nginx

- name: docker pull iplant-grouper
  sudo: yes
  #shell: docker pull {{remote_registry}}/{{grouper.image_name}}:{{docker.tag}}
  shell: docker pull {{docker.user}}/{{grouper.image_name}}:{{grouper.image_tag}}
  register: docker_pull_iplant_grouper_v
  tags:
    - docker_pull
    - docker_pull_iplant-grouper

- name: docker pull nginx-ssl
  sudo: yes
  shell: docker pull {{docker.user}}/{{grouper.http_server.image_name}}:{{docker.tag}}
  register: docker_pul_nginx_ssl_v #https://mail.google.com/mail/u/0/#inbox/152f072cb44fcde8
  tags:
    - docker_pull
    - docker-pull_iplant-grouper

- name: place data container systemd service file
  sudo: yes
  template: src={{data_container.service_name}} dest=/usr/lib/systemd/system group=root owner=root mode=0644
  tags:
    - docker_pull

- name: place grouper Systemd service file
  sudo: yes
  template: src={{grouper.service_name}} dest=/usr/lib/systemd/system/ group=root owner=root mode=0664
  register: service_file_grouper_v
  tags:
    - update_service_files
    - update_service_file_grouper

- name: place grouper-nginx Systemd service file
  template: src={{grouper.http_server.service_name}} dest=/usr/lib/systemd/system/ group=root owner=root mode=0664
  register: service_file_grouper_nginx_v
  tags:
    - update_service_files
    - update_service_file_grouper
    - update_service_file_grouper-nginx

- name: reload systemd
  shell: systemctl daemon-reload
  #when: service_file_grouper_v.changed or
  #      service_file_grouper_nginx_v.changed
  tags:
    - update_service_files
    - update_service_file_grouper
    - update_service_file_grouper-nginx

- name: enable grouper services
  service: name={{item}} enabled={{enable_services}}
  #when: service_file_grouper_v.changed or
  #      service_file_grouper_nginx_v.changed
  with_items:
    - "{{grouper.service_name}}"
    - "{{grouper.http_server.service_name}}"
    - "{{data_container.service_name}}"
  tags:
    - restart_services
    - restart_grouper
    - restart_grouper-nginx

- name: check grouper.init
  fail: msg="Grouper image and configs are in place. To initialize the DB, manually launch the container with 'sudo docker run --rm -it -v /etc/grouper:/etc/grouper discoenv/grouper:2.2.2 sh' then run 'gsh -registry -init', follow the prompts, then re-run the grouper playbook or manually start grouper services."
  when: grouper.init == "true"

- name: restart data container services
  shell: "systemctl restart {{data_container.service_name}} &"
  tags:
    - restart_services

- name: restart grouper service
  service: name={{grouper.service_name}} state=restarted
  when: grouper_properties_v.changed or
        grouper_ws_properties_v.changed or
        grouper_hibernate_properties_v.changed or
        grouper_loader_properties_v.changed or
        grouper_sources_xml_v.changed or
        grouper_subject_properties_v.changed or
        tomcat_server_xml_v.changed or
        tomcat_setenv_sh_v.changed or
        tomcat_users_xml_v.changed or
        docker_pull_iplant_grouper_v.changed or
        service_file_grouper_v.changed
  tags:
    - restart_services
    - restart_grouper

- name: restart grouper-nginx service
  service: name={{grouper.http_server.service_name}} state=restarted
  when: nginx_conf_v.changed or
        docker_pul_nginx_ssl_v.changed or
        service_file_grouper_nginx_v.changed
  tags:
    - restart_services
    - restart_grouper-nginx
